// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wlu.proto

package speechly

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WLURequest struct {
	LanguageCode string `protobuf:"bytes,1,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	Text         string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *WLURequest) Reset()         { *m = WLURequest{} }
func (m *WLURequest) String() string { return proto.CompactTextString(m) }
func (*WLURequest) ProtoMessage()    {}
func (*WLURequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ea94ce37ce3147, []int{0}
}
func (m *WLURequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WLURequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WLURequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WLURequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WLURequest.Merge(m, src)
}
func (m *WLURequest) XXX_Size() int {
	return m.Size()
}
func (m *WLURequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WLURequest.DiscardUnknown(m)
}

var xxx_messageInfo_WLURequest proto.InternalMessageInfo

func (m *WLURequest) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *WLURequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type WLUResponse struct {
	Segments []*WLUSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (m *WLUResponse) Reset()         { *m = WLUResponse{} }
func (m *WLUResponse) String() string { return proto.CompactTextString(m) }
func (*WLUResponse) ProtoMessage()    {}
func (*WLUResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ea94ce37ce3147, []int{1}
}
func (m *WLUResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WLUResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WLUResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WLUResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WLUResponse.Merge(m, src)
}
func (m *WLUResponse) XXX_Size() int {
	return m.Size()
}
func (m *WLUResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WLUResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WLUResponse proto.InternalMessageInfo

func (m *WLUResponse) GetSegments() []*WLUSegment {
	if m != nil {
		return m.Segments
	}
	return nil
}

type WLUSegment struct {
	Text     string       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Tokens   []*WLUToken  `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Entities []*WLUEntity `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	Intent   *WLUIntent   `protobuf:"bytes,4,opt,name=intent,proto3" json:"intent,omitempty"`
}

func (m *WLUSegment) Reset()         { *m = WLUSegment{} }
func (m *WLUSegment) String() string { return proto.CompactTextString(m) }
func (*WLUSegment) ProtoMessage()    {}
func (*WLUSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ea94ce37ce3147, []int{2}
}
func (m *WLUSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WLUSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WLUSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WLUSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WLUSegment.Merge(m, src)
}
func (m *WLUSegment) XXX_Size() int {
	return m.Size()
}
func (m *WLUSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_WLUSegment.DiscardUnknown(m)
}

var xxx_messageInfo_WLUSegment proto.InternalMessageInfo

func (m *WLUSegment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *WLUSegment) GetTokens() []*WLUToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *WLUSegment) GetEntities() []*WLUEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *WLUSegment) GetIntent() *WLUIntent {
	if m != nil {
		return m.Intent
	}
	return nil
}

type WLUToken struct {
	Word  string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *WLUToken) Reset()         { *m = WLUToken{} }
func (m *WLUToken) String() string { return proto.CompactTextString(m) }
func (*WLUToken) ProtoMessage()    {}
func (*WLUToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ea94ce37ce3147, []int{3}
}
func (m *WLUToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WLUToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WLUToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WLUToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WLUToken.Merge(m, src)
}
func (m *WLUToken) XXX_Size() int {
	return m.Size()
}
func (m *WLUToken) XXX_DiscardUnknown() {
	xxx_messageInfo_WLUToken.DiscardUnknown(m)
}

var xxx_messageInfo_WLUToken proto.InternalMessageInfo

func (m *WLUToken) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *WLUToken) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type WLUEntity struct {
	Entity        string `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	StartPosition int32  `protobuf:"varint,3,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition   int32  `protobuf:"varint,4,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
}

func (m *WLUEntity) Reset()         { *m = WLUEntity{} }
func (m *WLUEntity) String() string { return proto.CompactTextString(m) }
func (*WLUEntity) ProtoMessage()    {}
func (*WLUEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ea94ce37ce3147, []int{4}
}
func (m *WLUEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WLUEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WLUEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WLUEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WLUEntity.Merge(m, src)
}
func (m *WLUEntity) XXX_Size() int {
	return m.Size()
}
func (m *WLUEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_WLUEntity.DiscardUnknown(m)
}

var xxx_messageInfo_WLUEntity proto.InternalMessageInfo

func (m *WLUEntity) GetEntity() string {
	if m != nil {
		return m.Entity
	}
	return ""
}

func (m *WLUEntity) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *WLUEntity) GetStartPosition() int32 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

func (m *WLUEntity) GetEndPosition() int32 {
	if m != nil {
		return m.EndPosition
	}
	return 0
}

type WLUIntent struct {
	Intent string `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
}

func (m *WLUIntent) Reset()         { *m = WLUIntent{} }
func (m *WLUIntent) String() string { return proto.CompactTextString(m) }
func (*WLUIntent) ProtoMessage()    {}
func (*WLUIntent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ea94ce37ce3147, []int{5}
}
func (m *WLUIntent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WLUIntent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WLUIntent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WLUIntent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WLUIntent.Merge(m, src)
}
func (m *WLUIntent) XXX_Size() int {
	return m.Size()
}
func (m *WLUIntent) XXX_DiscardUnknown() {
	xxx_messageInfo_WLUIntent.DiscardUnknown(m)
}

var xxx_messageInfo_WLUIntent proto.InternalMessageInfo

func (m *WLUIntent) GetIntent() string {
	if m != nil {
		return m.Intent
	}
	return ""
}

func init() {
	proto.RegisterType((*WLURequest)(nil), "v1.WLURequest")
	proto.RegisterType((*WLUResponse)(nil), "v1.WLUResponse")
	proto.RegisterType((*WLUSegment)(nil), "v1.WLUSegment")
	proto.RegisterType((*WLUToken)(nil), "v1.WLUToken")
	proto.RegisterType((*WLUEntity)(nil), "v1.WLUEntity")
	proto.RegisterType((*WLUIntent)(nil), "v1.WLUIntent")
}

func init() { proto.RegisterFile("wlu.proto", fileDescriptor_e2ea94ce37ce3147) }

var fileDescriptor_e2ea94ce37ce3147 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x52, 0x3d, 0x8f, 0xda, 0x30,
	0x18, 0xc6, 0x24, 0x44, 0xe1, 0xe5, 0xa3, 0x92, 0x55, 0x55, 0x51, 0x87, 0x88, 0x06, 0x50, 0x69,
	0x87, 0x48, 0xd0, 0x2e, 0x5d, 0x5b, 0x21, 0xb5, 0x12, 0x43, 0x95, 0x82, 0x90, 0xba, 0xa0, 0x94,
	0xbc, 0xa2, 0x51, 0x53, 0x3b, 0x87, 0x1d, 0x3e, 0xe6, 0xfb, 0x03, 0x37, 0xde, 0x4f, 0xba, 0x91,
	0xf1, 0xc6, 0x13, 0xfc, 0x91, 0x53, 0x1c, 0x27, 0xdc, 0xe6, 0xe7, 0xc3, 0x8f, 0x1f, 0xbf, 0x36,
	0x34, 0xf7, 0x49, 0xe6, 0xa7, 0x5b, 0x2e, 0x39, 0xad, 0xef, 0xc6, 0xde, 0x14, 0x60, 0x39, 0x5b,
	0x04, 0x78, 0x93, 0xa1, 0x90, 0xb4, 0x0f, 0x9d, 0x24, 0x64, 0x9b, 0x2c, 0xdc, 0xe0, 0x6a, 0xcd,
	0x23, 0x74, 0x48, 0x8f, 0x8c, 0x9a, 0x41, 0xbb, 0x24, 0xbf, 0xf1, 0x08, 0x29, 0x05, 0x53, 0xe2,
	0x41, 0x3a, 0x75, 0xa5, 0xa9, 0xb5, 0xf7, 0x05, 0x5a, 0x2a, 0x46, 0xa4, 0x9c, 0x09, 0xa4, 0x1f,
	0xc1, 0x16, 0xb8, 0xf9, 0x8f, 0x4c, 0x0a, 0x87, 0xf4, 0x8c, 0x51, 0x6b, 0xd2, 0xf5, 0x77, 0x63,
	0x7f, 0x39, 0x5b, 0xfc, 0x2a, 0xe8, 0xa0, 0xd2, 0xbd, 0x7b, 0xa2, 0x2a, 0x68, 0xa1, 0x4a, 0x27,
	0xd7, 0x74, 0x3a, 0x00, 0x4b, 0xf2, 0x7f, 0xc8, 0x84, 0x53, 0x57, 0x61, 0x6d, 0x1d, 0x36, 0xcf,
	0xc9, 0x40, 0x6b, 0xf4, 0x03, 0xd8, 0xc8, 0x64, 0x2c, 0x63, 0x14, 0x8e, 0xa1, 0x7c, 0x1d, 0xed,
	0x9b, 0xe6, 0xf4, 0x31, 0xa8, 0x64, 0x3a, 0x04, 0x2b, 0x66, 0x12, 0x99, 0x74, 0xcc, 0x1e, 0x79,
	0x61, 0xfc, 0xa1, 0xc8, 0x40, 0x8b, 0xde, 0x67, 0xb0, 0xcb, 0x53, 0xf2, 0x5e, 0x7b, 0xbe, 0x8d,
	0xca, 0x5e, 0xf9, 0x9a, 0xbe, 0x86, 0x46, 0xcc, 0x22, 0x3c, 0xa8, 0x51, 0x34, 0x82, 0x02, 0x78,
	0xb7, 0x04, 0x9a, 0xd5, 0xa1, 0xf4, 0x0d, 0x58, 0xea, 0xd8, 0xa3, 0xde, 0xa9, 0x51, 0xbe, 0x77,
	0x17, 0x26, 0x19, 0xea, 0x31, 0x16, 0x80, 0x0e, 0xa1, 0x2b, 0x64, 0xb8, 0x95, 0xab, 0x94, 0x8b,
	0x58, 0xc6, 0x9c, 0x39, 0x86, 0x8a, 0xee, 0x28, 0xf6, 0xa7, 0x26, 0xe9, 0x3b, 0x68, 0x23, 0x8b,
	0xae, 0x26, 0x53, 0x99, 0x5a, 0xc8, 0xa2, 0xd2, 0xe2, 0xf5, 0x55, 0x89, 0xe2, 0x42, 0x79, 0x09,
	0x7d, 0x5f, 0x5d, 0xa2, 0x40, 0x13, 0x1f, 0x8c, 0xe5, 0x6c, 0x41, 0xdf, 0x83, 0x39, 0xcf, 0xe7,
	0x5c, 0x3e, 0x92, 0xfe, 0x0e, 0x6f, 0x5f, 0x55, 0xb8, 0x78, 0xd7, 0xaf, 0x83, 0x87, 0xb3, 0x4b,
	0x4e, 0x67, 0x97, 0x3c, 0x9d, 0x5d, 0x72, 0x77, 0x71, 0x6b, 0xa7, 0x8b, 0x5b, 0x7b, 0xbc, 0xb8,
	0xb5, 0xef, 0xe4, 0xb7, 0x2d, 0x52, 0xc4, 0xf5, 0xdf, 0xe4, 0xf8, 0xc7, 0x52, 0xdf, 0xeb, 0xd3,
	0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x91, 0xd9, 0xbe, 0x6b, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WLUClient is the client API for WLU service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WLUClient interface {
	// Send text and get the intents, entities and transcripts as a response.
	// *Note* The maximum message size is 16KB
	Text(ctx context.Context, in *WLURequest, opts ...grpc.CallOption) (*WLUResponse, error)
}

type wLUClient struct {
	cc *grpc.ClientConn
}

func NewWLUClient(cc *grpc.ClientConn) WLUClient {
	return &wLUClient{cc}
}

func (c *wLUClient) Text(ctx context.Context, in *WLURequest, opts ...grpc.CallOption) (*WLUResponse, error) {
	out := new(WLUResponse)
	err := c.cc.Invoke(ctx, "/v1.WLU/Text", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WLUServer is the server API for WLU service.
type WLUServer interface {
	// Send text and get the intents, entities and transcripts as a response.
	// *Note* The maximum message size is 16KB
	Text(context.Context, *WLURequest) (*WLUResponse, error)
}

// UnimplementedWLUServer can be embedded to have forward compatible implementations.
type UnimplementedWLUServer struct {
}

func (*UnimplementedWLUServer) Text(ctx context.Context, req *WLURequest) (*WLUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Text not implemented")
}

func RegisterWLUServer(s *grpc.Server, srv WLUServer) {
	s.RegisterService(&_WLU_serviceDesc, srv)
}

func _WLU_Text_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WLURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WLUServer).Text(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WLU/Text",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WLUServer).Text(ctx, req.(*WLURequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WLU_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.WLU",
	HandlerType: (*WLUServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Text",
			Handler:    _WLU_Text_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wlu.proto",
}

func (m *WLURequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLURequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WLURequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintWlu(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LanguageCode) > 0 {
		i -= len(m.LanguageCode)
		copy(dAtA[i:], m.LanguageCode)
		i = encodeVarintWlu(dAtA, i, uint64(len(m.LanguageCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WLUResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLUResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WLUResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Segments) > 0 {
		for iNdEx := len(m.Segments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Segments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WLUSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLUSegment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WLUSegment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Intent != nil {
		{
			size, err := m.Intent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWlu(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWlu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintWlu(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WLUToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLUToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WLUToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintWlu(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Word) > 0 {
		i -= len(m.Word)
		copy(dAtA[i:], m.Word)
		i = encodeVarintWlu(dAtA, i, uint64(len(m.Word)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WLUEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLUEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WLUEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndPosition != 0 {
		i = encodeVarintWlu(dAtA, i, uint64(m.EndPosition))
		i--
		dAtA[i] = 0x20
	}
	if m.StartPosition != 0 {
		i = encodeVarintWlu(dAtA, i, uint64(m.StartPosition))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintWlu(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Entity) > 0 {
		i -= len(m.Entity)
		copy(dAtA[i:], m.Entity)
		i = encodeVarintWlu(dAtA, i, uint64(len(m.Entity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WLUIntent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WLUIntent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WLUIntent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Intent) > 0 {
		i -= len(m.Intent)
		copy(dAtA[i:], m.Intent)
		i = encodeVarintWlu(dAtA, i, uint64(len(m.Intent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWlu(dAtA []byte, offset int, v uint64) int {
	offset -= sovWlu(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WLURequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LanguageCode)
	if l > 0 {
		n += 1 + l + sovWlu(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovWlu(uint64(l))
	}
	return n
}

func (m *WLUResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovWlu(uint64(l))
		}
	}
	return n
}

func (m *WLUSegment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovWlu(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovWlu(uint64(l))
		}
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovWlu(uint64(l))
		}
	}
	if m.Intent != nil {
		l = m.Intent.Size()
		n += 1 + l + sovWlu(uint64(l))
	}
	return n
}

func (m *WLUToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Word)
	if l > 0 {
		n += 1 + l + sovWlu(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovWlu(uint64(m.Index))
	}
	return n
}

func (m *WLUEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Entity)
	if l > 0 {
		n += 1 + l + sovWlu(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovWlu(uint64(l))
	}
	if m.StartPosition != 0 {
		n += 1 + sovWlu(uint64(m.StartPosition))
	}
	if m.EndPosition != 0 {
		n += 1 + sovWlu(uint64(m.EndPosition))
	}
	return n
}

func (m *WLUIntent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Intent)
	if l > 0 {
		n += 1 + l + sovWlu(uint64(l))
	}
	return n
}

func sovWlu(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWlu(x uint64) (n int) {
	return sovWlu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WLURequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLURequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLURequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguageCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LanguageCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WLUResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLUResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLUResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &WLUSegment{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WLUSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLUSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLUSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &WLUToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &WLUEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Intent == nil {
				m.Intent = &WLUIntent{}
			}
			if err := m.Intent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WLUToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLUToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLUToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Word", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Word = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WLUEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLUEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLUEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosition", wireType)
			}
			m.StartPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPosition", wireType)
			}
			m.EndPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndPosition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WLUIntent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWlu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WLUIntent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WLUIntent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWlu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWlu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWlu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWlu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWlu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWlu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWlu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWlu
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWlu
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWlu
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWlu        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWlu          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWlu = fmt.Errorf("proto: unexpected end of group")
)
